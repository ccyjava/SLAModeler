package edu.pku.sei.queryscript.parser;

public class QueryScriptLexerprs implements lpg.runtime.ParseTable,
		QueryScriptLexersym {
	public final static int ERROR_SYMBOL = 0;

	public final int getErrorSymbol() {
		return ERROR_SYMBOL;
	}

	public final static int SCOPE_UBOUND = 0;

	public final int getScopeUbound() {
		return SCOPE_UBOUND;
	}

	public final static int SCOPE_SIZE = 0;

	public final int getScopeSize() {
		return SCOPE_SIZE;
	}

	public final static int MAX_NAME_LENGTH = 0;

	public final int getMaxNameLength() {
		return MAX_NAME_LENGTH;
	}

	public final static int NUM_STATES = 39;

	public final int getNumStates() {
		return NUM_STATES;
	}

	public final static int NT_OFFSET = 103;

	public final int getNtOffset() {
		return NT_OFFSET;
	}

	public final static int LA_STATE_OFFSET = 766;

	public final int getLaStateOffset() {
		return LA_STATE_OFFSET;
	}

	public final static int MAX_LA = 1;

	public final int getMaxLa() {
		return MAX_LA;
	}

	public final static int NUM_RULES = 317;

	public final int getNumRules() {
		return NUM_RULES;
	}

	public final static int NUM_NONTERMINALS = 39;

	public final int getNumNonterminals() {
		return NUM_NONTERMINALS;
	}

	public final static int NUM_SYMBOLS = 142;

	public final int getNumSymbols() {
		return NUM_SYMBOLS;
	}

	public final static int SEGMENT_SIZE = 8192;

	public final int getSegmentSize() {
		return SEGMENT_SIZE;
	}

	public final static int START_STATE = 318;

	public final int getStartState() {
		return START_STATE;
	}

	public final static int IDENTIFIER_SYMBOL = 0;

	public final int getIdentifier_SYMBOL() {
		return IDENTIFIER_SYMBOL;
	}

	public final static int EOFT_SYMBOL = 99;

	public final int getEoftSymbol() {
		return EOFT_SYMBOL;
	}

	public final static int EOLT_SYMBOL = 104;

	public final int getEoltSymbol() {
		return EOLT_SYMBOL;
	}

	public final static int ACCEPT_ACTION = 448;

	public final int getAcceptAction() {
		return ACCEPT_ACTION;
	}

	public final static int ERROR_ACTION = 449;

	public final int getErrorAction() {
		return ERROR_ACTION;
	}

	public final static boolean BACKTRACK = false;

	public final boolean getBacktrack() {
		return BACKTRACK;
	}

	public final int getStartSymbol() {
		return lhs(0);
	}

	public final boolean isValidForParser() {
		return QueryScriptLexersym.isValidForParser;
	}

	public interface IsNullable {
		public final static byte isNullable[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 1 };
	};

	public final static byte isNullable[] = IsNullable.isNullable;

	public final boolean isNullable(int index) {
		return isNullable[index] != 0;
	}

	public interface ProsthesesIndex {
		public final static byte prosthesesIndex[] = { 0, 18, 23, 24, 25, 13,
				22, 4, 15, 16, 21, 32, 33, 34, 35, 36, 37, 2, 3, 5, 6, 7, 8, 9,
				10, 11, 12, 14, 17, 30, 31, 38, 1, 19, 20, 26, 27, 28, 29, 39 };
	};

	public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;

	public final int prosthesesIndex(int index) {
		return prosthesesIndex[index];
	}

	public interface IsKeyword {
		public final static byte isKeyword[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	};

	public final static byte isKeyword[] = IsKeyword.isKeyword;

	public final boolean isKeyword(int index) {
		return isKeyword[index] != 0;
	}

	public interface BaseCheck {
		public final static byte baseCheck[] = { 0, 1, 1, 3, 1, 1, 1, 1, 5, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2,
				1, 1, 2, 4, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 0, 1, 2, 2,
				2, 1, 2, 1, 2, 3, 2, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
				1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
				1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 0, 1, 3, 3 };
	};

	public final static byte baseCheck[] = BaseCheck.baseCheck;

	public final int baseCheck(int index) {
		return baseCheck[index];
	}

	public final static byte rhs[] = baseCheck;

	public final int rhs(int index) {
		return rhs[index];
	};

	public interface BaseAction {
		public final static char baseAction[] = { 17, 17, 17, 17, 17, 17, 17,
				17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
				17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
				17, 17, 20, 21, 21, 21, 24, 24, 24, 24, 25, 25, 23, 23, 5, 5,
				33, 33, 27, 8, 8, 8, 6, 6, 6, 6, 6, 2, 2, 2, 2, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 35, 35, 35,
				35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
				34, 34, 37, 37, 37, 10, 10, 38, 38, 26, 26, 18, 18, 18, 18, 18,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
				30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12,
				12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
				12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13,
				13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
				13, 13, 13, 13, 13, 13, 9, 9, 9, 9, 28, 28, 28, 28, 28, 28, 28,
				28, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 7, 15, 31, 31, 19,
				19, 39, 39, 29, 22, 599, 444, 443, 443, 443, 416, 445, 2, 939,
				54, 959, 54, 308, 370, 370, 370, 370, 356, 411, 370, 4, 5, 6,
				406, 950, 370, 342, 419, 370, 446, 162, 370, 701, 387, 387,
				387, 387, 100, 895, 1, 47, 47, 47, 47, 387, 47, 387, 387, 47,
				951, 47, 996, 405, 313, 313, 313, 313, 884, 326, 313, 995, 357,
				326, 387, 394, 313, 970, 54, 313, 502, 311, 311, 311, 311, 981,
				54, 103, 45, 45, 45, 45, 311, 45, 311, 311, 45, 952, 45, 205,
				52, 52, 52, 52, 798, 165, 164, 164, 164, 870, 54, 992, 993,
				903, 328, 997, 953, 44, 328, 375, 43, 897, 375, 917, 384, 928,
				392, 52, 384, 52, 392, 998, 999, 954, 1001, 1002, 901, 955,
				956, 957, 449, 449 };
	};

	public final static char baseAction[] = BaseAction.baseAction;

	public final int baseAction(int index) {
		return baseAction[index];
	}

	public final static char lhs[] = baseAction;

	public final int lhs(int index) {
		return lhs[index];
	};

	public interface TermCheck {
		public final static byte termCheck[] = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8,
				9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
				25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
				41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
				57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
				73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
				89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 0, 100, 101, 0, 1, 2,
				3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
				20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
				36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
				52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
				68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
				84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 0,
				100, 101, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
				16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
				32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
				48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
				64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
				80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
				96, 97, 98, 0, 0, 0, 102, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
				12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
				28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
				44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
				60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
				76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
				92, 93, 94, 95, 96, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
				13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
				29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
				45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
				61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
				77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
				93, 94, 95, 96, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
				14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
				30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
				46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
				62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
				78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
				94, 95, 96, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
				15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
				31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
				47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
				63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
				79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 0, 0, 0, 0,
				0, 97, 98, 0, 100, 101, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
				12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
				28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
				44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
				60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
				0, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
				92, 93, 94, 95, 96, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
				0, 14, 15, 0, 0, 0, 0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
				30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
				46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
				62, 63, 64, 65, 66, 67, 68, 69, 0, 71, 0, 1, 2, 3, 4, 5, 6, 7,
				8, 9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0,
				0, 0, 0, 0, 0, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18,
				13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7,
				8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0,
				0, 0, 74, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5,
				6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 99, 0,
				0, 0, 0, 0, 99, 0, 0, 0, 11, 12, 0, 0, 13, 17, 14, 19, 11, 15,
				0, 16, 19, 0, 16, 0, 70, 0, 0, 72, 0, 73, 0, 0, 75, 0, 76, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 98, 0, 100,
				101, 0, 0, 99, 99, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	};

	public final static byte termCheck[] = TermCheck.termCheck;

	public final int termCheck(int index) {
		return termCheck[index];
	}

	public interface TermAction {
		public final static char termAction[] = { 0, 449, 496, 496, 496, 496,
				496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
				496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
				496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
				496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
				496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
				496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 394, 496,
				496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
				495, 496, 496, 496, 496, 496, 496, 496, 496, 496, 48, 496, 496,
				449, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
				494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
				494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
				494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
				494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
				494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
				494, 494, 494, 499, 494, 494, 494, 494, 494, 494, 494, 494,
				494, 494, 494, 494, 494, 457, 494, 494, 494, 494, 494, 494,
				494, 494, 494, 449, 494, 494, 7, 501, 501, 501, 501, 501, 501,
				501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
				501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
				501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
				501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
				501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
				501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
				501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
				501, 501, 501, 501, 501, 501, 501, 501, 449, 449, 449, 501,
				449, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
				370, 370, 370, 370, 439, 370, 370, 370, 370, 370, 370, 370,
				370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
				370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
				370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
				370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
				370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
				370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
				370, 449, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762,
				762, 762, 762, 762, 762, 442, 762, 762, 762, 762, 762, 762,
				762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762,
				762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762,
				762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762,
				762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762,
				762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762,
				762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762,
				762, 762, 449, 760, 760, 760, 760, 760, 760, 760, 760, 760,
				760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760,
				760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760,
				760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760,
				760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760,
				760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760,
				760, 760, 760, 760, 760, 760, 765, 760, 760, 760, 760, 760,
				760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760, 760,
				760, 760, 440, 449, 444, 444, 444, 444, 444, 444, 444, 444,
				444, 444, 443, 443, 378, 443, 443, 330, 422, 428, 467, 443,
				443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
				443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
				443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
				443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
				443, 445, 488, 367, 404, 459, 461, 350, 489, 476, 369, 487,
				480, 473, 474, 471, 472, 486, 477, 418, 423, 463, 464, 449,
				449, 449, 449, 449, 445, 445, 449, 445, 445, 449, 387, 387,
				387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
				387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
				387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
				387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
				387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
				387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
				387, 449, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
				387, 387, 387, 387, 387, 387, 387, 387, 387, 440, 1, 614, 614,
				614, 614, 614, 614, 614, 614, 614, 614, 613, 613, 449, 613,
				613, 449, 449, 449, 449, 613, 613, 613, 613, 613, 613, 613,
				613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613,
				613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613,
				613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613,
				613, 613, 613, 613, 613, 613, 613, 449, 615, 4, 503, 503, 503,
				503, 503, 503, 503, 503, 503, 503, 375, 375, 420, 449, 326,
				326, 326, 326, 326, 326, 326, 326, 326, 326, 449, 449, 11, 449,
				449, 449, 163, 432, 449, 328, 328, 328, 328, 328, 328, 328,
				328, 328, 328, 475, 500, 766, 449, 384, 384, 384, 384, 384,
				384, 384, 384, 384, 384, 449, 392, 392, 392, 392, 392, 392,
				392, 392, 392, 392, 58, 503, 503, 503, 503, 503, 503, 503, 503,
				503, 503, 9, 35, 29, 13, 449, 53, 161, 167, 430, 57, 503, 503,
				503, 503, 503, 503, 503, 503, 503, 503, 60, 503, 503, 503, 503,
				503, 503, 503, 503, 503, 503, 59, 503, 503, 503, 503, 503, 503,
				503, 503, 503, 503, 17, 5, 448, 32, 449, 16, 449, 308, 1, 449,
				3, 449, 375, 375, 449, 449, 482, 470, 438, 469, 483, 441, 449,
				757, 468, 449, 757, 449, 611, 449, 449, 485, 449, 479, 449,
				449, 355, 449, 758, 449, 449, 449, 449, 449, 449, 449, 449,
				449, 449, 449, 449, 449, 449, 449, 449, 611, 611, 449, 611,
				611, 449, 449, 4, 9, 1 };
	};

	public final static char termAction[] = TermAction.termAction;

	public final int termAction(int index) {
		return termAction[index];
	}

	public final int asb(int index) {
		return 0;
	}

	public final int asr(int index) {
		return 0;
	}

	public final int nasb(int index) {
		return 0;
	}

	public final int nasr(int index) {
		return 0;
	}

	public final int terminalIndex(int index) {
		return 0;
	}

	public final int nonterminalIndex(int index) {
		return 0;
	}

	public final int scopePrefix(int index) {
		return 0;
	}

	public final int scopeSuffix(int index) {
		return 0;
	}

	public final int scopeLhs(int index) {
		return 0;
	}

	public final int scopeLa(int index) {
		return 0;
	}

	public final int scopeStateSet(int index) {
		return 0;
	}

	public final int scopeRhs(int index) {
		return 0;
	}

	public final int scopeState(int index) {
		return 0;
	}

	public final int inSymb(int index) {
		return 0;
	}

	public final String name(int index) {
		return null;
	}

	public final int originalState(int state) {
		return 0;
	}

	public final int asi(int state) {
		return 0;
	}

	public final int nasi(int state) {
		return 0;
	}

	public final int inSymbol(int state) {
		return 0;
	}

	/**
	 * assert(! goto_default);
	 */
	public final int ntAction(int state, int sym) {
		return baseAction[state + sym];
	}

	/**
	 * assert(! shift_default);
	 */
	public final int tAction(int state, int sym) {
		int i = baseAction[state], k = i + sym;
		return termAction[termCheck[k] == sym ? k : i];
	}

	public final int lookAhead(int la_state, int sym) {
		int k = la_state + sym;
		return termAction[termCheck[k] == sym ? k : la_state];
	}
}
